@file:Suppress("UNUSED_PARAMETER")

package lesson2.task2

import lesson1.task1.sqr
import kotlin.math.*

val months30 = listOf(4, 6, 9, 11) //список номеров месяцев, содержащих 30 дней
val months31 = listOf(1, 3, 5, 7, 8, 10, 12) //список номеров месяцев, содержащих 31 день

/**
 * Пример
 *
 * Лежит ли точка (x, y) внутри окружности с центром в (x0, y0) и радиусом r?
 */
fun pointInsideCircle(x: Double, y: Double, x0: Double, y0: Double, r: Double) =
    sqr(x - x0) + sqr(y - y0) <= sqr(r)

/**
 * Простая
 *
 * Четырехзначное число назовем счастливым, если сумма первых двух ее цифр равна сумме двух последних.
 * Определить, счастливое ли заданное число, вернуть true, если это так.
 */
fun isNumberHappy(number: Int): Boolean = number / 1000 + number / 100 % 10 == number / 10 % 10 + number % 10

/**
 * Простая
 *
 * На шахматной доске стоят два ферзя (ферзь бьет по вертикали, горизонтали и диагоналям).
 * Определить, угрожают ли они друг другу. Вернуть true, если угрожают.
 * Считать, что ферзи не могут загораживать друг друга.
 */
fun queenThreatens(x1: Int, y1: Int, x2: Int, y2: Int): Boolean {
    return(abs(x1 - x2) == abs(y1 - y2) || x1 == x2 || y1 == y2)
}

/**
 * Простая
 *
 * Дан номер месяца (от 1 до 12 включительно) и год (положительный).
 * Вернуть число дней в этом месяце этого года по григорианскому календарю.
 */
fun daysInMonth(month: Int, year: Int): Int {
    return when {
        months30.contains(month) -> 30
        months31.contains(month) -> 31
        else -> {
            if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) 29
            else 28
        }
    }
}

/**
 * Средняя
 *
 * Проверить, лежит ли окружность с центром в (x1, y1) и радиусом r1 целиком внутри
 * окружности с центром в (x2, y2) и радиусом r2.
 * Вернуть true, если утверждение верно
 */
fun circleInside(
    x1: Double, y1: Double, r1: Double,
    x2: Double, y2: Double, r2: Double
): Boolean = sqrt((x2 - x1).pow(2) + (y2 - y1).pow(2)) + r1 <= r2
/*окружность 1 будет лежать внутри окружности 2, когда сумма расстояния между центрами этих окружностей и
радиуса 1ой окружности будет меньше или равна радиусу 2ой окружности*/

/**
 * Средняя
 *
 * Определить, пройдет ли кирпич со сторонами а, b, c сквозь прямоугольное отверстие в стене со сторонами r и s.
 * Стороны отверстия должны быть параллельны граням кирпича.
 * Считать, что совпадения длин сторон достаточно для прохождения кирпича, т.е., например,
 * кирпич 4 х 4 х 4 пройдёт через отверстие 4 х 4.
 * Вернуть true, если кирпич пройдёт
 */
fun brickPasses(a: Int, b: Int, c: Int, r: Int, s: Int): Boolean {
    val maxSide = max(c, max(a, b))
    val minSide = min(c, min(a, b))
    val medSide = a + b + c - maxSide - minSide
    /*кирпич будет проходить в отверстие, когда его меньшая грань будет меньше или равна
    площади прямоугольного отверстия*/
    return medSide <= max(r,s) && minSide <= min(r,s)
}
